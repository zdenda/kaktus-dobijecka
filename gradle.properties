# Project-wide Gradle settings.

# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.

# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html

# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# Default value: -Xmx10248m -XX:MaxPermSize=256m
# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
org.gradle.jvmargs=-Xmx2048m

# When configured, Gradle will run in incubating parallel mode.
# This option should only be used with decoupled projects. More details, visit
# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
org.gradle.parallel=true

# When set to true the Gradle daemon is used to run the build.
# For local developer builds this is our favorite property.
org.gradle.daemon=true

# Only relevant projects are configured which results in faster builds for large multi-projects.
org.gradle.configureondemand=true

# Uploading ProGuard mapping files with Gradle
# This is the path to the Private Key, which can be generated at
# https://console.firebase.google.com/project/_/settings/serviceaccounts/crashreporting
# We have to use this since we can't manually upload mapping.txt files until at least one crash
# or error is reported for a given app version, but the Gradle task doesn't have this limitation.
# Run command following this pattern to both build the APK and upload its mapping file:
# ./gradlew :app:firebaseUpload<VariantName>ProguardMapping
# For example: ./gradlew :app:firebaseUploadReleaseProguardMapping
FirebaseServiceAccountFilePath=firebase-crashreporting.json
